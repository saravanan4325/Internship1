import os
import json
from datetime import datetime

TASKS_FILE = 'tasks.json'

class Task:
    def __init__(self, title, priority='medium', due_date=None):
        self.title = title
        self.priority = priority
        self.due_date = due_date
        self.completed = False

    def to_dict(self):
        return {
            'title': self.title,
            'priority': self.priority,
            'due_date': self.due_date,
            'completed': self.completed
        }

    @staticmethod
    def from_dict(task_dict):
        task = Task(task_dict['title'], task_dict['priority'], task_dict.get('due_date'))
        task.completed = task_dict['completed']
        return task

class ToDoList:
    def __init__(self):
        self.tasks = []
        self.load_tasks()

    def add_task(self, task):
        self.tasks.append(task)
        self.save_tasks()

    def remove_task(self, index):
        if 0 <= index < len(self.tasks):
            del self.tasks[index]
            self.save_tasks()

    def complete_task(self, index):
        if 0 <= index < len(self.tasks):
            self.tasks[index].completed = True
            self.save_tasks()

    def save_tasks(self):
        with open(TASKS_FILE, 'w') as file:
            json.dump([task.to_dict() for task in self.tasks], file, indent=4)

    def load_tasks(self):
        if os.path.exists(TASKS_FILE):
            with open(TASKS_FILE, 'r') as file:
                tasks_data = json.load(file)
                self.tasks = [Task.from_dict(task_dict) for task_dict in tasks_data]

    def display_tasks(self):
        if not self.tasks:
            print("No tasks found.")
            return

        for index, task in enumerate(self.tasks):
            due_date = task.due_date
            if due_date:
                try:
                    due_date = datetime.strptime(due_date, '%Y-%m-%d').strftime('%Y-%m-%d')
                except ValueError:
                    due_date = "Invalid date format"
            status = "Done" if task.completed else "Pending"
            print(f"{index + 1}. [{status}] {task.title} (Priority: {task.priority}, Due: {due_date})")

def main():
    todo_list = ToDoList()

    while True:
        print("\nTo-Do List:")
        todo_list.display_tasks()

        print("\nOptions:")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Complete Task")
        print("4. Exit")

        choice = input("Choose an option: ")

        if choice == '1':
            title = input("Enter task title: ")
            priority = input("Enter task priority (high, medium, low): ")
            due_date = input("Enter due date (YYYY-MM-DD) or leave blank: ")
            due_date = due_date if due_date else None
            task = Task(title, priority, due_date)
            todo_list.add_task(task)
        elif choice == '2':
            try:
                index = int(input("Enter task number to remove: ")) - 1
                todo_list.remove_task(index)
            except ValueError:
                print("Invalid input. Please enter a number.")
        elif choice == '3':
            try:
                index = int(input("Enter task number to complete: ")) - 1
                todo_list.complete_task(index)
            except ValueError:
                print("Invalid input. Please enter a number.")
        elif choice == '4':
            break
        else:
            print("Invalid option, please try again.")

if __name__ == "__main__":
    main()
